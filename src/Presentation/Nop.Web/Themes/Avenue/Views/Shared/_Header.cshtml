@using Nop.Core
@using Nop.Services.Orders;
@using Nop.Services.Security;
@using Nop.Core.Domain.Orders;

@inject IStoreContext storeContext
@inject IWorkContext workContext
@inject IPermissionService permissionService
@inject IShoppingCartService shoppingCartService

@{
    var wishlistEnabled = permissionService.Authorize(StandardPermissionProvider.EnableWishlist);
    var shoppingCartEnabled = permissionService.Authorize(StandardPermissionProvider.EnableShoppingCart);

    var shoppingCartItems = shoppingCartService.GetShoppingCart(workContext.CurrentCustomer, ShoppingCartType.ShoppingCart, storeContext.CurrentStore.Id);
    var shoppingCartItemsCount = shoppingCartItems.Sum(item => item.Quantity);

    var wishlistItems = shoppingCartService.GetShoppingCart(workContext.CurrentCustomer, ShoppingCartType.Wishlist, storeContext.CurrentStore.Id);
    var wishlistItemsCount = wishlistItems.Sum(item => item.Quantity);

    ViewBag.WishlistEnabled = wishlistEnabled;
    ViewBag.WishlistItems = wishlistItemsCount;
    ViewBag.ShoppingCartEnabled = shoppingCartEnabled;
    ViewBag.ShoppingCartItems = shoppingCartItemsCount;
}

<div class="header">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderBefore })
    @await Component.InvokeAsync("AdminHeaderLinks")
    <div class="header-upper">
        <div class="profile-links responsive-nav-content">
            <div class="responsive-nav-head">
                <span class="text">@T("SevenSpikes.Themes.Avenue.Profile")</span>
                <span class="button close-links"></span>
            </div>
            <div class="responsive-nav-body">
                @await Component.InvokeAsync("AdminHeaderLinks")
                @await Component.InvokeAsync("HeaderLinks")
                <div class="header-selects">
                    @await Component.InvokeAsync("TaxTypeSelector")
                    @await Component.InvokeAsync("CurrencySelector")
                    @await Component.InvokeAsync("LanguageSelector")
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderSelectors })
                </div>
            </div>
        </div>
    </div>
    <div class="header-lower">
        <div class="header-lower-inner">
            <div class="header-logo-wrapper table-cell">
                <div class="nav-button menu-button">
                    <span class="trigger" title="@T("SevenSpikes.Themes.Common.MenuTitle")"></span>
                </div>
                <div class="header-logo">
                    @await Component.InvokeAsync("Logo")
                </div>
            </div>
            <div class="header-menu table-cell responsive-nav-content">
                <div class="responsive-nav-head">
                    <span class="text">@T("SevenSpikes.Themes.Common.MenuTitle")</span>
                    <span class="button close-menu"></span>
                </div>
                @{
                    var menu = await Component.InvokeAsync("Widget", new { widgetZone = "theme_header_menu" });
                }
                @if (String.IsNullOrEmpty(menu.ToHtmlString()))
                {
                    @await Component.InvokeAsync("TopMenu")
                }
                else
                {
                    @menu
                }
            </div>
            <div class="responsive-nav-wrapper table-cell">
                <div class="nav-button search-button">
                    <span class="trigger" title="@T("Search")"></span>
                </div>
                <div class="nav-button personal-button">
                    <span class="trigger" title="@T("SevenSpikes.Themes.Avenue.Profile")"></span>
                </div>
                @if (ViewBag.WishlistEnabled != null && ViewBag.WishlistEnabled)
                {
                    <div class="nav-button wishlist-button">
                        <a class="trigger" title="@T("Wishlist")" href="@Url.RouteUrl("Wishlist")"><span class="counter wishlist-qty">@T("Wishlist.HeaderQuantity", ViewBag.WishlistItems)</span></a>
                    </div>
                }
                @if (ViewBag.ShoppingCartEnabled != null && ViewBag.ShoppingCartEnabled)
                {
                    <div class="nav-button cart-button">
                        <a class="trigger" title="@T("ShoppingCart")" href="@Url.RouteUrl("ShoppingCart")"><span class="counter cart-qty">@T("ShoppingCart.HeaderQuantity", ViewBag.ShoppingCartItems)</span></a>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="search-box store-search-box responsive-nav-content">
        @await Component.InvokeAsync("SearchBox")
    </div>
    <div class="flyout-cart responsive-nav-content">
        <div class="responsive-nav-head">
            <span class="text">@T("ShoppingCart")</span>
            <span class="button close-cart"></span>
        </div>
        <div class="responsive-nav-body">
            @await Component.InvokeAsync("FlyoutShoppingCart")
        </div>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderAfter })
</div>
